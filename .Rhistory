head(temp2)
dim(temp2)
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
arrange(Study_ID, Visit_no, Sample_no) -> temp2
head(temp2)
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() -> temp3
head(temp3)
extract_first_row = function(x){
return[1,]
}
temp3$data[1]
extract_first_row_col = function(x){
return[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row(.x))) -> temp3
extract_first_row_col = function(x){
return[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row(.x))) -> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
extract_first_row_col = function(x){
return[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(unlist(.x)))) -> temp3
extract_first_row_col = function(x){
return x[1,1]
extract_first_row_col = function(x){
x[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
head(temp3)
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map_chr(data, ~extract_first_row_col(.x))) %>%
-> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map_chr(data, ~extract_first_row_col(.x)))-> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
head(temp3)
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) %>%
select(-data) %>%
unnest(Sample_Bcode) -> temp3
head(temp3)
dim(temmp3)
dim(temp3)
biobank_longitudinal_serum = temp3
biobank_longi_serum = temp3
write.csv(biobank_longi_serum, "biomarker_serum_longi_2orMore.csv", quote = F, row.names = F)
q()
x <- 4
x
y = 3
x + y
q()
q()
library(gapminder)
library(tidyverse)
euro = gapminder %>%
filter(continent == "Europe", year == 1952)
euro %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point()
cor.test(euro$gdpPercap, euro$lifeExp)
lm_euro = lm(data = euro, lifeExp~gdpPercap)
summary(lm_euro)
confint(lm_euro$coefficients)
confint(lm_euro)
confint(lm_euro)
head(gapminder)
#
gapminder %>%
nest(country) -> temp
#
gapminder %>%
group_by(country) %>%
nest() -> temp
temp
temp$data
temp$data[1]
class(temp$data[1])
class(temp$data[[1])
class(temp$data[[1]])
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(.x = data, .f = lm(lifeExp ~ gdpPercap, data = .x))) -> temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) -> temp
?map
map
tmep
temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) -> temp
temp
temp$lmod[[1]]
tidy(temp$lmod[[1]])
library(broom)
tidy(temp$lmod[[1]])
glance(temp$lmod[[1]])
?tidy
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) -> temp
temp
temp$est[[1]]
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) %>%
unnest(est) -> temp
temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) %>%
unnest(est) %>%
filter(term == "gdpPercap") -> temp
tepm
temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) %>%
unnest(est) %>%
filter(term == "gdpPercap") %>%
select(country, estimate) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
select(country, estimate) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
select(country, estimate, fit) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) %>%
select(country, estimate, r.squared) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
select(country, estimate, fit) %>%
unnest(fit) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) %>%
select(country, estimate, r.squared) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, estimate, r.squared) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared) %>%
slice_max(r.squared, 10)
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared) %>%
slice_max(r.squared, n=10)
lm_fit = gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared)
lm_fit %>%
slice_max(r.squared, n=10)
lm_fit %>%
slice_min(r.squared, n=10)
?slice_max
lm_fit %>%
arrange(r.squared)
lm_fit %>%
arrange(desc(r.squared))
# linear mixed effects model
library(lmer)
install.packages("lmer")
# linear mixed effects model
library(lme4)
install.packages("lme4")
# linear mixed effects model
library(lme4)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1/continent))
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1/continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
summary(lme_mod)
str(gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap+year|continent), data = gapminder)
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + (1|year) + (1|continent), data = gapminder)
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + (1|year) + (1|continent), data = gapminder)
summary(lme_mod)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-year and by-continent variability
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-year and by-continent variability
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + year, data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gpdPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1 +  gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1 +  year|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent) + (1|country), data = gapminder)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod2 = lmer(lifeExp ~ year + (1|continent) + (1|country), data = gapminder)
anova(lme_mod, lme_mod2)
lme_mod = lmer(lifeExp ~ gdpPercap + year + continent + (1|country), data = gapminder)
lme_mod2 = lmer(lifeExp ~ year + continent + (1|country), data = gapminder)
anova(lme_mod, lme_mod2)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod2 = lmer(lifeExp ~ year + (1|continent), data = gapminder)
anova(lme_mod, lme_mod2)
gapminder %>%
ggplot(aes(gpdPercap, lifeExp)) +
geom_point() +
facet_wrap(~continent)
gapminder %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point() +
facet_wrap(~continent)
gapminder %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point() +
facet_wrap(~year)
gapminder %>%
ggplot(aes(continent, lifeExp)) +
geom_boxplot()
gapminder %>%
ggplot(aes(year, lifeExp)) +
geom_boxplot()
gapminder %>%
ggplot(aes(year, lifeExp)) +
geom_boxplot()
gapminder %>%
ggplot(aes(factor(year), lifeExp)) +
geom_boxplot()
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
lme_mod2 = lmer(lifeExp ~ year + (1|continent), data = gapminder, REML = FALSE)
anova(lme_mod, lme_mod2)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder, REML = FALSE)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod2 = lmer(lifeExp ~ year + (1|continent), data = gapminder, REML = FALSE)
q()
reticulate::repl_python()
result
yes
reticulate::source_python('~/Desktop/floyd.py')
result
reticulate::repl_python()
reticulate::repl_python()
reticulate::source_python('~/Desktop/floyd.py')
result
graph
INF
q()
setwd("~/Dropbox/Github/sdg")
plastic = read.csv("compt_plastic_wst.csv")
str(plastic)
library(tidyr)
temp = gather(plastic, key = "year", value = "plastic", X1993:X2017)
library(stringr)
temp$year = str_remove(temp$year, "^X")
str(temp)
temp$year = as.numeric(temp$year)
plastic <- temp
library(ggplot2)
ggplot(plastic, aes(x = year, y = plastic)) +
geom_point()
hdi = read.csv("hdi_human_development_index.csv")
temp = gather(hdi, key = "year", value = "hdindex", X1990:X2021)
temp$year = str_remove(temp$year, "^X")
temp$year = as.numeric(temp$year)
hdi <- temp
library(dplyr)
plastic_hdi = plastic %>%
inner_join(hdi, by = c("country", "year"))
ph = plastic_hdi[complete.cases(plastic_hdi),]
ggplot(ph, aes(x = hdindex, y=plastic)) +
geom_point()
p = ggplot(ph, aes(x = hdindex, y=plastic, color = country)) +
geom_point() +
theme(legend.position = "none")
library(plotly)
ggplotly(p)
wn = read.csv("wn_bothhouses_c.csv")
temp = gather(wn, key = "year", value = "wnparl", X1945:X2021)
temp$year = str_remove(temp$year, "^X")
temp$year = as.numeric(temp$year)
wn <- temp
phw = ph %>%
inner_join(wn, by = c("country", "year"))
phw = phw[complete.cases(phw),]
p = ggplot(phw, aes(x = hdindex, y=plastic, color = wnparl, size = wnparl)) +
geom_point(alpha = 0.5) +
scale_color_continuous()
ggplotly(p)
head(phw)
p = ggplot(phw, aes(x = wnparl, y=plastic, color = hdindex, size = hdindex)) +
geom_point(alpha = 0.5) +
scale_color_continuous()
ggplotly(p)
# 산점도 탐색하기
p = ggplot(ph, aes(x = hdindex, y=plastic, color = country)) +
geom_point() +
theme(legend.position = "none")
library(plotly)
ggplotly(p)
# 시각화: 산점도
# hindex와 plastic 관계에 대한 산점도에서 여성 국회의원 비율을 점의 크기와 색으로 표현
p = ggplot(phw, aes(x = hdindex, y=plastic, color = wnparl, size = wnparl)) +
geom_point(alpha = 0.5) +
scale_color_continuous()
ggplotly(p)
head(phw)
phwg = phw %>%
mutate(wnparl_gr = ifelse(wnparl < median(wnparl), "low", "high"))
head(phwg)
ggplot(phwg, aes(x = hdindex, y=plastic)) +
geom_point() +
facet_wrap(~ wnparl_gr)
phwg = phw %>%
mutate(hdi_gr = ifelse(hdindex < median(hdindex), "low", "high"))
phwg = phw %>%
mutate(hdi_gr = ifelse(hdindex < median(hdindex), "low", "high"))
ggplot(phwg, aes(x = wnparl, y=plastic)) +
geom_point() +
facet_wrap(~ hdi_gr)
ggplot(phwg, aes(x = wnparl, y=plastic)) +
geom_point() +
geom_stat("lm") +
facet_wrap(~ hdi_gr)
ggplot(phwg, aes(x = wnparl, y=plastic)) +
geom_point() +
geom_smooth("lm") +
facet_wrap(~ hdi_gr)
ggplot(phwg, aes(x = wnparl, y=plastic)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ hdi_gr)
# 시각화: 산점도
# hindex와 plastic 관계에 대한 산점도에서 여성 국회의원 비율을 점의 크기와 색으로 표현
p = ggplot(phw, aes(x = hdindex, y=plastic, color = wnparl, size = wnparl)) +
geom_point(alpha = 0.5) +
scale_color_continuous()
ggplotly(p)
ggplot(phwg, aes(x = wnparl, y=plastic)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ hdi_gr)
cor.test(ph$hdindex, ph$plastic)
head(phwg)
df_lo = phwg %>%
filter(hdi == "low")
df_lo = phwg %>%
filter(hdi_gr == "low")
df_hi = phwg %>%
filter(hdi_gr == "high")
lm(plastic ~ wnparl, data = df_lo)
lm_lo = lm(plastic ~ wnparl, data = df_lo)
summary(lm_lo)
lm_hi = lm(plastic ~ wnparl, data = df_hi)
summary(lm_hi)
anova(lm_lo, lm_hi)
cor.test(lm_lo$plastic, lm_lo$wnparl)
cor.test(lm_lo$plastic, lm_lo$wnparl)
cor.test(df_lo$plastic, df_lo$wnparl)
cor.test(df_hi$plastic, df_hi$wnparl)
# 회귀 분석: 단순 선형회귀
df = pwhg
# 상관관계: 전체와 부분
cor.test(df$plasti, df$wnparl)
# 상관관계: 전체와 부분
cor.test(df$plastic, df$wnparl)
# 부분 그룹으로 나누기
df = pwhg
# 부분 그룹으로 나누기
df = phwg
# 상관관계: 전체와 부분
cor.test(df$plastic, df$wnparl)
cor.test(df_lo$plastic, df_lo$wnparl)
cor.test(df_hi$plastic, df_hi$wnparl)
# 상관관계: 전체와 부분
cor.test(df$plastic, df$wnparl)
q()
